package com.pacesoft.sdk.agnos

import ca.amadis.agnos.sdk.ola.types.AID
import java.io.ByteArrayOutputStream
import java.io.IOException

object Config {

    class ContactlessCfg(
        val aid: AID,
        val partial: Boolean,
        val kernelId: Int,
        val additionalData: ByteArray
    )

    class PublicKeyCfg(
        val rid: ByteArray,
        val idx: Byte,
        val modulus: ByteArray,
        val exponentValue: ByteArray,
        val expirDate: ByteArray
    )

    private val visaCfg = byteArrayOf(
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40,                                                      // Terminal Country Code
        0x9F.toByte(), 0x1B, 0x04, 0x00, 0x00, 0x94.toByte(), 0x72,                                 // Terminal Floor Limit
        0x9F.toByte(), 0x33, 0x03, 0x00, 0x08, 0xC8.toByte(),                                       // Terminal Capabilities
        0x9F.toByte(), 0x35, 0x01, 0x21,                                                            // Terminal Type
        0x9F.toByte(), 0x40, 0x05, 0x60, 0x00, 0x00, 0x00, 0x00,                                    // Additional Terminal Capabilities
        0x9F.toByte(), 0x66, 0x04, 0xA4.toByte(), 0x00, 0x40, 0x00,                                 // TTQ
        //0xDF.toByte(), 0x05, 0x04, 0x32, 0x20, 0x40, 0x00,
        0xDF.toByte(), 0x08, 0x06, 0x00, 0x00, 0x10, 0x03, 0x00, 0x01,
        0xDF.toByte(), 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
        0xDF.toByte(), 0x0B, 0x06, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01,
        0xDF.toByte(), 0x19, 0x01, 0x01,
        0xDF.toByte(), 0x1B, 0x03, 0xF8.toByte(), 0x10, 0xC1.toByte(),                              // Kernel Configuration
        0xDF.toByte(), 0x1E, 0x05, 0xD8.toByte(), 0x40, 0x00, 0xA8.toByte(), 0x00,
        0xDF.toByte(), 0x1F, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x20, 0x05, 0xD8.toByte(), 0x40, 0x00, 0xF8.toByte(), 0x00,
        0xDF.toByte(), 0x22, 0x05, 0xfc.toByte(), 0xf1.toByte(), 0xfc.toByte(), 0xf1.toByte(),
                                   0xe0.toByte(),
        0xDF.toByte(), 0x23, 0x06, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00,
        //0xDF.toByte(), 0x24, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00,
        //0xDF.toByte(), 0x26, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x00,                                                // Message Hold Time (100 of ms)
        0xDF.toByte(), 0x30, 0x01, 0x78,                                                            // Bitmap Entry Point
        0xDF.toByte(), 0x32, 0x01, 0x01                                                             // Status Zero Amount Allowed Flag
    )

    private val mcCfg = byteArrayOf(
        0x9F.toByte(), 0x09, 0x02, 0x00, 0x02,                                                      // Application Version Number
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40,                                                      // Terminal Country Code
        0x9F.toByte(), 0x35, 0x01, 0x21,                                                            // Terminal Type
        0x9F.toByte(), 0x40, 0x05, 0xD2.toByte(), 0x00, 0xC0.toByte(), 0xF0.toByte(), 0x00,         // Additional Terminal Capabilities
        0x9F.toByte(), 0x7E, 0x01, 0x01,                                                            // Mobile Support Indicator
        0xDF.toByte(), 0x03, 0x01, 0xE8.toByte(),                                                   // Security Capabilities (EMV)
        0xDF.toByte(), 0x0C, 0x01, 0x02,                                                            // Kernel ID
        0xDF.toByte(), 0x17, 0x01, 0x00,                                                            // Security Capabilities (EMV)
        0xDF.toByte(), 0x18, 0x01, 0x48,                                                            // CVM Capabilities - CVM Required (EMV)
        0xDF.toByte(), 0x19, 0x01, 0x08,                                                            // CVM Capabilities - No CVM Required (EMV)
        0xDF.toByte(), 0x1A, 0x03, 0x9F.toByte(), 0x6A, 0x04,                                       // Default UDOL (Magstripe)
        0xDF.toByte(), 0x1B, 0x01, 0x30,                                                            // Kernel Configuration
        0xDF.toByte(), 0x1E, 0x01, 0x10,                                                            // CVM Capabilities - CVM Required (Magstripe)
        0xDF.toByte(), 0x1C, 0x02, 0x00, 0x00,                                                      // Max Lifetime Torn Transaction(s) (EMV)
        0xDF.toByte(), 0x1D, 0x01, 0x00,                                                            // Max Number Torn Transaction (EMV)
        0xDF.toByte(), 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,                                    // TAC - Default (EMV)
        0xDF.toByte(), 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,                                    // TAC - Denial (EMV)
        0xDF.toByte(), 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,                                    // TAC - Online (EMV)
        0xDF.toByte(), 0x23, 0x06, 0x00.toByte(), 0x00.toByte(), 0x01.toByte(), 0x00.toByte(),
                                   0x00.toByte(), 0x00,                                             // RCFL
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,                              // RCTL (No On-Device CVM)
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x25, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,                              // RCTL (On-Device CVM)
//        0xDF.toByte(), 0x26, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,                              // RCRL
        0xDF.toByte(), 0x2C, 0x01, 0x00,                                                            // CVM Capabilities - No CVM Required (Magstripe)
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x00
    )

    private val amexCfg = byteArrayOf(
        0x9F.toByte(), 0x09, 0x02, 0x00, 0x01,                                                      // Application Version Number
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40,                                                      // Terminal Country Code
        0x9F.toByte(), 0x1E, 0x08, 0x36, 0x30, 0x32, 0x33, 0x33, 0x32, 0x31, 0x32,                  // Terminal Identification
        0x9F.toByte(), 0x33, 0x03, 0x00, 0x08, 0xC8.toByte(),                                       // Terminal Capabilities
        0x9F.toByte(), 0x35, 0x01, 0x21,                                                            // Terminal Type
        0x9F.toByte(), 0x6D, 0x01, 0x80.toByte(),                                                   // Contactless Reader Capabilities
        0xDF.toByte(), 0x1B, 0x05, 0x31, 0x01, 0x00, 0x00, 0x00,                                    // Kernel Configuration
        0xDF.toByte(), 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,                                    // TAC Default
        0xDF.toByte(), 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,                                    // TAC Denial
        0xDF.toByte(), 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00                               // ORCTL

    )

    private val jcbCfg = byteArrayOf(
        0x9F.toByte(), 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x9F.toByte(), 0x15, 0x02, 0x70, 0x32,
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40.toByte(),
        0x9F.toByte(), 0x33, 0x03, 0x00, 0x48, 0x00,
        0x9F.toByte(), 0x35, 0x01, 0x21,
        0x9F.toByte(), 0x4E, 0x17, 0x58, 0x58, 0x20, 0x4D, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4E, 0x54,
                             0x20, 0x59, 0x59, 0x20, 0x4C, 0x4F, 0x43, 0x41, 0x54, 0x49, 0x4F, 0x4E,
        0x9F.toByte(), 0x52, 0x01, 0x20,
        0xDF.toByte(), 0x1B, 0x03, 0x7B, 0x00, 0x80.toByte(),
        0xDF.toByte(), 0x22, 0x05, 0x90.toByte(), 0x60, 0x00, 0x90.toByte(), 0x00,
        0xDF.toByte(), 0x23, 0x06, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
//        0xDF.toByte(), 0x26, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x20, 0x05, 0x90.toByte(), 0x40, 0x00, 0x80.toByte(), 0x00,
        0xDF.toByte(), 0x21, 0x05, 0x04, 0x10, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x27, 0x02, 0x03, 0xE8.toByte(),
        0xDF.toByte(), 0x6E, 0x03, 0x00, 0x07, 0xD0.toByte(),
        0xDF.toByte(), 0x6F, 0x01, 0x00,
        0xDF.toByte(), 0x70, 0x01, 0x00
    )

    private val dpasCfg = byteArrayOf(
        0x9F.toByte(), 0x01, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
        0x9F.toByte(), 0x09, 0x02, 0x01, 0x00,
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40,
        0x9F.toByte(), 0x1B, 0x04, 0x00, 0x00, 0x3A, 0x98.toByte(),
        0x9F.toByte(), 0x1C, 0x08, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        0x9F.toByte(), 0x35, 0x01, 0x21,
        0x9F.toByte(), 0x4E, 0x0F, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
        0x4C, 0x4D, 0x4E, 0x4F,
        0x9F.toByte(), 0x66, 0x04, 0xB4.toByte(), 0x40, 0xC0.toByte(), 0x00,
        0xDF.toByte(), 0x1B, 0x01, 0xE0.toByte(),
        0xDF.toByte(), 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x23, 0x06, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00,
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
//        0xDF.toByte(), 0x26, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x30, 0x01, 0xF8.toByte(),
        0xDF.toByte(), 0x32, 0x01, 0x01,
    )

    private val cupCfg = byteArrayOf(
        0x9F.toByte(), 0x09, 0x02, 0x00, 0x30,
        0x9F.toByte(), 0x1A, 0x02, 0x08, 0x40,
        0x9F.toByte(), 0x1B, 0x04, 0x00, 0x00, 0x3A, 0x98.toByte(),
        0x9F.toByte(), 0x33, 0x03, 0x00, 0x48, 0x00,
        0x9F.toByte(), 0x66, 0x04, 0xE4.toByte(), 0x40, 0x40, 0x80.toByte(),
        0xDF.toByte(), 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x23, 0x06, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00,
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
//        0xDF.toByte(), 0x26, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x30, 0x01, 0x78
    )

    private val pureCfg = byteArrayOf(
        0x9F.toByte(), 0x01, 0x06, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
        0x9F.toByte(), 0x09, 0x02, 0x00, 0x01,
        0x9F.toByte(), 0x15, 0x02, 0x11, 0x22,
        0x9F.toByte(), 0x1A, 0x02, 0x00, 0x56,
        0x9F.toByte(), 0x1B, 0x04, 0x00, 0x00, 0x00, 0x3C,
        0x9F.toByte(), 0x1C, 0x08, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        0x9F.toByte(), 0x4E, 0x04, 0x46, 0x49, 0x4D, 0x45,
        0xDF.toByte(), 0x19, 0x01, 0x08,
        0xDF.toByte(), 0x1A, 0x03, 0x9F.toByte(), 0x6A, 0x04,
        0xDF.toByte(), 0x1B, 0x02, 0x00, 0x20,
        0xDF.toByte(), 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xDF.toByte(), 0x23, 0x06, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00,
//        0xDF.toByte(), 0x24, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0xDF.toByte(), 0x24, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0xDF.toByte(), 0x25, 0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
        0xDF.toByte(), 0x26, 0x06, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//        0xDF.toByte(), 0x26, 0x06, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00,
        0xDF.toByte(), 0x2C, 0x01, 0x00,
        0xDF.toByte(), 0x2D, 0x03, 0x00, 0x00, 0x10,
        0xDF.toByte(), 0x30, 0x01, 0xF8.toByte(),
        0xDF.toByte(), 0x31, 0x28, 0x9F.toByte(), 0x02, 0x9F.toByte(), 0x03, 0x9F.toByte(), 0x26,
                                   0x82.toByte(), 0x9F.toByte(), 0x36, 0x9F.toByte(), 0x27,
                                   0x9F.toByte(), 0x10, 0x9F.toByte(), 0x1A, 0x95.toByte(), 0x5F,
                                   0x2A, 0x9A.toByte(), 0x9C.toByte(), 0x9F.toByte(), 0x37,
                                   0x9F.toByte(), 0x35, 0x57, 0x9F.toByte(), 0x34,
                                   0x84.toByte(), 0x5F, 0x34, 0x5A, 0xC7.toByte(), 0x9F.toByte(),
                                   0x33, 0x9F.toByte(), 0x73, 0x9F.toByte(), 0x77, 0x9F.toByte(),
                                   0x45,
        0xDF.toByte(), 0x34, 0x02, 0x8C.toByte(), 0x57,
        0xC7.toByte(), 0x05, 0x36, 0x04, 0x20, 0x00, 0xF9.toByte()
    )

    val contactlessCfg = arrayOf(
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x04, 0x10, 0x10)), true, 2, mcCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x04, 0x20, 0x10)), true, 2, mcCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x04, 0x30, 0x60)), true, 2, mcCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x03, 0x84.toByte(), 0x10)), true, 2, mcCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x03, 0x10, 0x10)), true, 3, visaCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x03, 0x20, 0x10)), true, 3, visaCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x25, 0x01)), true, 4, amexCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x65, 0x10, 0x10)), true, 5, jcbCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x01, 0x52, 0x30, 0x10)), true, 6, dpasCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x03, 0x24, 0x10, 0x10)), true, 6, dpasCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01)), true, 7, cupCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x02)), true, 7, cupCfg),
        ContactlessCfg(AID.FromBytes(byteArrayOf(0xA0.toByte(), 0x00,0x00,0x01,0x76,0x10,0x10)), true, 0x43, pureCfg)
    )

    val publicKeyCfg = arrayOf(
        /* MasterCard */
        PublicKeyCfg(byteArrayOf(0xa0.toByte(), 0x00, 0x00, 0x00, 0x03),
                     0x92.toByte(),
                     byteArrayOf(0x99.toByte(), 0x6a, 0xf5.toByte(), 0x6f, 0x56, 0x91.toByte(), 0x87.toByte(), 0xd0.toByte(), 0x92.toByte(), 0x93.toByte(), 0xc1.toByte(), 0x48, 0x10, 0x45, 0x0e, 0xd8.toByte(), 0xee.toByte(), 0x33, 0x57, 0x39, 0x7b, 0x18, 0xa2.toByte(), 0x45, 0x8e.toByte(), 0xfa.toByte(), 0xa9.toByte(), 0x2d, 0xa3.toByte(), 0xb6.toByte(), 0xdf.toByte(), 0x65, 0x14, 0xec.toByte(), 0x06, 0x01, 0x95.toByte(), 0x31, 0x8f.toByte(), 0xd4.toByte(), 0x3b, 0xe9.toByte(), 0xb8.toByte(), 0xf0.toByte(), 0xcc.toByte(), 0x66, 0x9e.toByte(), 0x3f, 0x84.toByte(), 0x40, 0x57, 0xcb.toByte(), 0xdd.toByte(), 0xf8.toByte(), 0xbd.toByte(), 0xa1.toByte(), 0x91.toByte(), 0xbb.toByte(), 0x64, 0x47, 0x3b, 0xc8.toByte(), 0xdc.toByte(), 0x9a.toByte(), 0x73, 0x0d, 0xb8.toByte(), 0xf6.toByte(), 0xb4.toByte(), 0xed.toByte(), 0xe3.toByte(), 0x92.toByte(), 0x41, 0x86.toByte(), 0xff.toByte(), 0xd9.toByte(), 0xb8.toByte(), 0xc7.toByte(), 0x73, 0x57, 0x89.toByte(), 0xc2.toByte(), 0x3a, 0x36, 0xba.toByte(), 0x0b, 0x8a.toByte(), 0xf6.toByte(), 0x53, 0x72, 0xeb.toByte(), 0x57, 0xea.toByte(), 0x5d, 0x89.toByte(), 0xe7.toByte(), 0xd1.toByte(), 0x4e, 0x9c.toByte(), 0x7b, 0x6b, 0x55, 0x74, 0x60, 0xf1.toByte(), 0x08, 0x85.toByte(), 0xda.toByte(), 0x16, 0xac.toByte(), 0x92.toByte(), 0x3f, 0x15, 0xaf.toByte(), 0x37, 0x58, 0xf0.toByte(), 0xf0.toByte(), 0x3e, 0xbd.toByte(), 0x3c, 0x5c, 0x2c, 0x94.toByte(), 0x9c.toByte(), 0xba.toByte(), 0x30, 0x6d, 0xb4.toByte(), 0x4e, 0x6a, 0x2c, 0x07, 0x6c, 0x5f, 0x67, 0xe2.toByte(), 0x81.toByte(), 0xd7.toByte(), 0xef.toByte(), 0x56, 0x78, 0x5d, 0xc4.toByte(), 0xd7.toByte(), 0x59, 0x45, 0xe4.toByte(), 0x91.toByte(), 0xf0.toByte(), 0x19, 0x18, 0x80.toByte(), 0x0a, 0x9e.toByte(), 0x2d, 0xc6.toByte(), 0x6f, 0x60, 0x08, 0x05, 0x66, 0xce.toByte(), 0x0d, 0xaf.toByte(), 0x8d.toByte(), 0x17, 0xea.toByte(), 0xd4.toByte(), 0x6a, 0xd8.toByte(), 0xe3.toByte(), 0x0a, 0x24, 0x7c, 0x9f.toByte()),
                     byteArrayOf(0x03),
                     byteArrayOf(0x24, 0x12, 0x31)),

        PublicKeyCfg(byteArrayOf(0xa0.toByte(), 0x00, 0x00, 0x00, 0x25),
                     0x0f,
                     byteArrayOf(0xC8.toByte(), 0xD5.toByte(), 0xAC.toByte(), 0x27, 0xA5.toByte(), 0xE1.toByte(), 0xFB.toByte(), 0x89.toByte(), 0x97.toByte(), 0x8C.toByte(), 0x7C, 0x64, 0x79, 0xAF.toByte(), 0x99.toByte(), 0x3A, 0xB3.toByte(), 0x80.toByte(), 0x0E, 0xB2.toByte(), 0x43, 0x99.toByte(), 0x6F, 0xBB.toByte(), 0x2A, 0xE2.toByte(), 0x6B, 0x67, 0xB2.toByte(), 0x3A, 0xC4.toByte(), 0x82.toByte(), 0xC4.toByte(), 0xB7.toByte(), 0x46, 0x00, 0x5A, 0x51, 0xAF.toByte(), 0xA7.toByte(), 0xD2.toByte(), 0xD8.toByte(), 0x3E, 0x89.toByte(), 0x4F, 0x59, 0x1A, 0x23, 0x57, 0xB3.toByte(), 0x0F, 0x85.toByte(), 0xB8.toByte(), 0x56, 0x27, 0xFF.toByte(), 0x15, 0xDA.toByte(), 0x12, 0x29, 0x0F, 0x70, 0xF0.toByte(), 0x57, 0x66, 0x55, 0x2B, 0xA1.toByte(), 0x1A, 0xD3.toByte(), 0x4B, 0x71, 0x09, 0xFA.toByte(), 0x49, 0xDE.toByte(), 0x29, 0xDC.toByte(), 0xB0.toByte(), 0x10, 0x96.toByte(), 0x70, 0x87.toByte(), 0x5A, 0x17, 0xEA.toByte(), 0x95.toByte(), 0x54, 0x9E.toByte(), 0x92.toByte(), 0x34, 0x7B, 0x94.toByte(), 0x8A.toByte(), 0xA1.toByte(), 0xF0.toByte(), 0x45, 0x75, 0x6D, 0xE5.toByte(), 0x6B, 0x70, 0x7E, 0x38, 0x63, 0xE5.toByte(), 0x9A.toByte(), 0x6C, 0xBE.toByte(), 0x99.toByte(), 0xC1.toByte(), 0x27, 0x2E, 0xF6.toByte(), 0x5F, 0xB6.toByte(), 0x6C, 0xBB.toByte(), 0x4C, 0xFF.toByte(), 0x07, 0x0F, 0x36, 0x02, 0x9D.toByte(), 0xD7.toByte(), 0x62, 0x18, 0xB2.toByte(), 0x12, 0x42, 0x64, 0x5B, 0x51, 0xCA.toByte(), 0x75, 0x2A, 0xF3.toByte(), 0x7E, 0x70, 0xBE.toByte(), 0x1A, 0x84.toByte(), 0xFF.toByte(), 0x31, 0x07, 0x9D.toByte(), 0xC0.toByte(), 0x04, 0x8E.toByte(), 0x92.toByte(), 0x88.toByte(), 0x83.toByte(), 0xEC.toByte(), 0x4F, 0xAD.toByte(), 0xD4.toByte(), 0x97.toByte(), 0xA7.toByte(), 0x19, 0x38, 0x5C, 0x2B, 0xBB.toByte(), 0xEB.toByte(), 0xC5.toByte(), 0xA6.toByte(), 0x6A, 0xA5.toByte(), 0xE5.toByte(), 0x65, 0x5D, 0x18, 0x03, 0x4E, 0xC5.toByte()),
                     byteArrayOf(0x03),
                     byteArrayOf(0x24, 0x12, 0x31)),

        PublicKeyCfg(byteArrayOf(0xA0.toByte(), 0x00, 0x00, 0x00, 0x04),
                     0xFA.toByte(),
                     byteArrayOf(0xA9.toByte(), 0x0F, 0xCD.toByte(), 0x55, 0xAA.toByte(), 0x2D, 0x5D, 0x99.toByte(), 0x63, 0xE3.toByte(), 0x5E, 0xD0.toByte(), 0xF4.toByte(), 0x40, 0x17, 0x76, 0x99.toByte(), 0x83.toByte(), 0x2F, 0x49, 0xC6.toByte(), 0xBA.toByte(), 0xB1.toByte(), 0x5C, 0xDA.toByte(), 0xE5.toByte(), 0x79, 0x4B, 0xE9.toByte(), 0x3F, 0x93.toByte(), 0x4D, 0x44, 0x62, 0xD5.toByte(), 0xD1.toByte(), 0x27, 0x62, 0xE4.toByte(), 0x8C.toByte(), 0x38, 0xBA.toByte(), 0x83.toByte(), 0xD8.toByte(), 0x44, 0x5D, 0xEA.toByte(), 0xA7.toByte(), 0x41, 0x95.toByte(), 0xA3.toByte(), 0x01, 0xA1.toByte(), 0x02, 0xB2.toByte(), 0xF1.toByte(), 0x14, 0xEA.toByte(), 0xDA.toByte(), 0x0D, 0x18, 0x0E, 0xE5.toByte(), 0xE7.toByte(), 0xA5.toByte(), 0xC7.toByte(), 0x3E, 0x0C, 0x4E, 0x11, 0xF6.toByte(), 0x7A, 0x43, 0xDD.toByte(), 0xAB.toByte(), 0x5D, 0x55, 0x68, 0x3B, 0x14, 0x74, 0xCC.toByte(), 0x06, 0x27, 0xF4.toByte(), 0x4B, 0x8D.toByte(), 0x30, 0x88.toByte(), 0xA4.toByte(), 0x92.toByte(), 0xFF.toByte(), 0xAA.toByte(), 0xDA.toByte(), 0xD4.toByte(), 0xF4.toByte(), 0x24, 0x22, 0xD0.toByte(), 0xE7.toByte(), 0x01, 0x35, 0x36, 0xC3.toByte(), 0xC4.toByte(), 0x9A.toByte(), 0xD3.toByte(), 0xD0.toByte(), 0xFA.toByte(), 0xE9.toByte(), 0x64, 0x59, 0xB0.toByte(), 0xF6.toByte(), 0xB1.toByte(), 0xB6.toByte(), 0x05, 0x65, 0x38, 0xA3.toByte(), 0xD6.toByte(), 0xD4.toByte(), 0x46, 0x40, 0xF9.toByte(), 0x44, 0x67, 0xB1.toByte(), 0x08, 0x86.toByte(), 0x7D, 0xEC.toByte(), 0x40, 0xFA.toByte(), 0xAE.toByte(), 0xCD.toByte(), 0x74, 0x0C, 0x00, 0xE2.toByte(), 0xB7.toByte(), 0xA8.toByte(), 0x85.toByte(), 0x2D),
                     byteArrayOf(0x03),
                     byteArrayOf(0x24, 0x12, 0x31))
    )

    fun getOlaConfig(): ByteArray? {
        val path = byteArrayOf(0xdf.toByte(), 0x01, 28)
        val pathValue = "/data/data/ca.amadis.tester/"
        val cakeys = byteArrayOf(0xdf.toByte(), 0x02, 34)
        val cakeysValue = "/data/data/ca.amadis.tester/CAKeys"
        val crl = byteArrayOf(0xdf.toByte(), 0x03, 31)
        val crlValue = "/data/data/ca.amadis.tester/CRL"
        val efl = byteArrayOf(0xdf.toByte(), 0x04, 31)
        val eflValue = "/data/data/ca.amadis.tester/EFL"
        val pcsc = byteArrayOf(0xdf.toByte(), 0x05, 0x00) // pcsc not used
        val lang = byteArrayOf(0xdf.toByte(), 0x06, 0x00) // lang not used
        val runtimeParams = byteArrayOf(0xdf.toByte(), 0x07, 0x07, 0x00, 0x0F, 0x04, 0x0F, 0x0A, 0x00, 0x01)
        val traceLevel = byteArrayOf(0xdf.toByte(), 0x08, 0x01, 0x05)
        val pollingTechno = byteArrayOf(0xdf.toByte(), 0x10, 0x01, 0x04) // Contactless only
        var sredMode: ByteArray
//        if (BuildConfig.FLAVOR.lowercase().contains("nosred")) {
//            sredMode = byteArrayOf(0xdf.toByte(), 0x17, 0x01, 0x00) // SRED mode not active
//        } else {
            sredMode = byteArrayOf(0xdf.toByte(), 0x17, 0x01, 0x01) // SRED mode active
//        }

        try {
            val out = ByteArrayOutputStream()
            out.write(path)
            out.write(pathValue.toByteArray())
            out.write(cakeys)
            out.write(cakeysValue.toByteArray())
            out.write(crl)
            out.write(crlValue.toByteArray())
            out.write(efl)
            out.write(eflValue.toByteArray())
            out.write(pcsc)
            out.write(lang)
            out.write(runtimeParams)
            out.write(traceLevel)
            out.write(pollingTechno)
            out.write(sredMode)
            return out.toByteArray()

        } catch (e: IOException) {
        }

        return null
    }
}

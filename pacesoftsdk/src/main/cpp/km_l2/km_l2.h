/**
 * ----------------------------------------------------------------------------
 * @file km_l2.h
 * @author Amadis project development team
 * @brief L2 key management and crypto library
 * PROJECT: Amadis Mobile Threat Detection SDK
 * REFERENCES:
 * @copyright 2020-2021 - (AMADIS), All right Reserved
 * ----------------------------------------------------------------------------
 */
#ifndef KM_L2_H
 #define KM_L2_H
#ifdef __cpluplus
extern "C"
{
#endif

//_____I N C L U D E___________________________________________________________

#include <stdint.h>
#include <jni.h>

//_____D E F I N E_____________________________________________________________

/* Function execution succeeded */
#ifndef KM_ERR_OK
#define KM_ERR_OK (0)
#endif

/* L2 configuration slots ids */
typedef enum {

    KM_L2_CFG_ID_0 __unused,
    KM_L2_CFG_ID_1 __unused,
    KM_L2_CFG_ID_2 __unused,
    KM_L2_CFG_ID_3 __unused,
    KM_L2_CFG_ID_4 __unused,
    KM_L2_CFG_ID_5 __unused,
    KM_L2_CFG_ID_6 __unused,
    KM_L2_CFG_ID_7 __unused,
    KM_L2_CFG_ID_8 __unused,
    KM_L2_CFG_ID_9 __unused,

} KML2ConfigId_t;

/* Entry points naming randomization */
#define KML2Create          RMINUXDBDOASQVHMIGNNSDJHCJBIGKUQAUDPRSVLHSWPWCTFELNPIEOAGENKVLNY
#define KML2Release         LHGCZFQHYTAYWQYYIMWRPQKDYLMWZCOLPPWJYGRBQRHXFEQWLZIHSEFOGEOEFFBA
#define KML2EncryptCardData MCQHHDNDCRUBJEYSAYQCCPGPECJNFWTUTIJVLCRUBZBUGXKYBSLQPLOVLLPMBGBP
#define KML2DecryptCardData NMDCCMGUTITFQOWHXZKLEUZQVOYCYWFKBHMRUXRHJTKINWJTQPNPYIWXCPJEYGVI
#define KML2ExportCardData  CGARRLNNAUVAHNQBEAUGDQHEITSSXUQHUZNYGZLNWQSAULEMKJQTMSAQPEKFETNR
#define KML2SHA256          BTSTZCNTPZITSRHCRZLOGEMWHOYXVLTAQNHBFPWPQJVWMCVYBUGTMQMWHRSJLAXQ
#define KML2ConfigRead      ZGMQHAWZBGLHVPZNPFMIYOPQOTPTVVIUUOPRSZKMCMWOQGMXNGABUCVLTWQRBBCV
#define KML2ConfigWrite     ZWPRNNNWFCEPKHACYKUZCDTFBPCQGEYPBWWYMFERLZKQMMPTQAMJPIJZZCFZQAJF
#define KML2ClearBuffer     QMGQUSOIWYRIQJFDZEVTKFNSQLLAILNPTZACRSJZXFPDPJRCWNLDKIESPIKOFRQT

//_____T Y P E D E F___________________________________________________________

/* Session handle */
typedef uint64_t KML2Session_t;
#define KML2SessionNull (0)

/* Error type */
typedef uint32_t SDKError_t;

//_____P R O T O T Y P E S_____________________________________________________

/**
 * ----------------------------------------------------------------------------
 * @brief KML2Create: Create L2 KMS client session
 * @detail Create a key management client session context and returns a handle
 *         to the session.
 * @param[in] xpJniEnv JNI environmennt
 * @param[in] xContext application context
 * @param[out] xpSession session handle.
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2Create(JNIEnv* xpJniEnv,
                      jobject xContext,
                      KML2Session_t* const xpSession);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2Release: Release a KMS client session
 * @detail Release an existing key management client session. Note that the
 *         session handle will becode invalid after this call and any
 *         attempt to use it will result in a memory corruption.
 * @param[in] xSession Session handle.
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2Release(const KML2Session_t xSession);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2EncryptCardData: Card data encryption (AES-GCM-256)
 * @detail Create a new session key and encrypt data:
 *
 * - xPlainSz must be a multiple of 16 (AES cipher block size). The caller
 *   is responsible for the plaintext padding.
 *
 * - When xpCipher is set to NULL, no encryption is performed. The function
 *   sets *xpCipherSz with the expected ciphertext size.
 *
 * - When xpCipher points to the ciphertext output buffer, the function performs
 *   the encryption and sets *xpCipherSz with the ciphertext size. Note that in
 *   this case *xpCipherSz must be set to the output buffer size by the caller.
 *
 * - The expected ciphertext size is:
 *   *xpCipherSz = xPlainSz + 12 (IV) + 16 (authentication tag)
 *
 * - The IV and authentication tag are generated by the encryption algorithm and
 *   are part of the ciphertext.
 *
 * - A new session key is generated for each encryption. Every new encryption
 *   invalidates previous ciphertexts.
 *
 * - A session key does not persists between sessions.
 *
 * @param[in] xSession session handle
 * @param[in] xpPlain plaintext
 * @param[in] xPlainSz plaintext size (bytes)
 * @param[out] xpCipher ciphertext (if not NULL)
 * @param[in,out] xpCipherSz ciphertext buffer size/ciphertext size (bytes)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2EncryptCardData(KML2Session_t xSession,
                               const uint8_t* xpPlain, const size_t xPlainSz,
                               uint8_t* xpCipher, size_t* xpCipherSz);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2DecryptCardData: Card data decryption (AES-GCM-256)
 * @detail Decrypt the data encrypted using KML2EncryptCardData:
 *
 * - When xpPlain is set to NULL, no decryption is performed. The function sets
 *   *xpPlainSz to the expected plaintext size.
 *
 * - When xpPlain points to the plaintext output buffer, the function performs
 *   the decryption and sets *xpPlainSz with the plaintext size. Note that in
 *   this case *xpPlainSz must be set to the output buffer size by the caller.
 *
 * - when xpPlain is not set to NULL, *xpPlainSz must be set to plaintext buffer size
 *   by the caller (bytes) otherwise the value of *xpPlainSz is ignored.
 * - when xpPlain is set to NULL, *xpPlainSz is set to the plaintext size (bytes)
 *
 * - The expected plaintext size is:
 *   *xpPlainSz = xCipherSz - 12 (IV) - 16 (authentication tag)
 *
 * - Decryption uses the current session key (which renewed with each encryption).
 *
 * @param[in] xSession session handle
 * @param[in] xpChipher ciphertext
 * @param[in] xCipherSz ciphertext size (bytes)
 * @param[out] xpPlain plaintext (if not NULL)
 * @param[in,out] xpPlainSz plaintext buffer size/plaintext size (bytes)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2DecryptCardData(const KML2Session_t xSession,
                               const uint8_t* xpCipher, const size_t xCipherSz,
                               uint8_t* xpPlain, size_t* xpPlainSz);

/**
 * ----------------------------------------------------------------------------
 * @brief KMSessionSHA256: Compute SHA-256.
 * @detail Compute SHA-256 of provided data
 * @param[in] xSession session handle
 * @param[in] xpData input data
 * @param[in] xDataSz input data size (bytes)
 * @param[in] xpDigest digest (must point to a buffer at least 32 bytes in size)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2SHA256(const KML2Session_t xSession,
                      const uint8_t* xpData, const size_t xDataSz,
                      uint8_t * const xpDigest);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2ExportCardData: Export card data
 * @detail Generate a session key and encrypt the card data.
 *
 * - xpPlainDataSz must be a multiple of 16 (AES cipher block size). The caller
 *   is responsible for the plaintext padding.
 *
 * - *xppEncData is allocated by the function (if call is successful)
 *   and must be freed by the caller after use, using the free() function
 *
 * - The format of *xppEncData is:
 * ID(KeK)||E-RSAES-OAEP-SHA256(KeK,Kses||IVses)||E-AES-CBC-128(Kses,IVses,xpPlainData)
 *   Where:
 *   KeK is the key encryption key RSA public key
 *   ID(KeK) is the first 5 bytes of the KeK certificate serial number.
 *   Kses is the random key
 *   IVses is the random shared IV
 *
 * @param[in] xSession session handle
 * @param[in] xpPlainData plain text card data, padded.
 * @param[in] xpPlainDataSz plain text card data size (bytes)
 * @param[out] xppEncData encrypted card data
 * @param[out] xpEncDataSz encrypted card data size (bytes)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2ExportCardData(const KML2Session_t xSession,
                              const uint8_t* xpPlainData, const size_t xPlainDataSz,
                              uint8_t** const xppEncData, size_t* const xpEncDataSz);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2ConfigRead: Read configuration data.
 * @detail Decrypt and read configuration data. *xpDataSz is set to 0
 *         if the configuration data does not exist in the store.
 *         The *xppData buffer is allocated by the function and must be freed
 *         by the caller using the KML2ClearBuffer function.
 * @param[in] xSession session handle
 * @param[in] xCfgId configuration slot id (0-9)
 * @param[out] xppData allocated data buffer
 * @param[out] xpDataSz configuration data size (bytes)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2ConfigRead(const KML2Session_t xSession,
                          const KML2ConfigId_t xCfgId,
                          uint8_t** const xppData, size_t* xpDataSz);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2ConfigWrite: Write configuration data.
 * @detail Encrypt and store configuration data
 * @param[in] xSession session handle
 * @param[in] xCfgId configuration slot id (0-9)
 * @param[in] xpData configuration data
 * @param[in] xpDataSz configuration data size (bytes)
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2ConfigWrite(const KML2Session_t xSession,
                           const KML2ConfigId_t xCfgId,
                           const uint8_t* xpData, const size_t xDataSz);

/**
 * ----------------------------------------------------------------------------
 * @brief KML2ClearBuffer: Delete buffer
 * @detail clear and delete buffers allocated by the KML2ExportCardData and
 *         KML2ConfigRead functions
 *
 * @param[in] xSession session handle
 * @param[in] xpPlainData plain text card data, padded.
 * @retval Error code (0 for no error)
 * ----------------------------------------------------------------------------
 */
SDKError_t KML2ClearBuffer(const KML2Session_t xSession,
                           const uint8_t* xpBuffer, const size_t xBufferSz);

#ifdef __cpluplus
}
#endif

#endif // #ifndef KM_L2_H
